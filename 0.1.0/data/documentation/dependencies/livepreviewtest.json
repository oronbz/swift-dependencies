{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous section we showed that to conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":" you must provide "},{"type":"emphasis","inlineContent":[{"type":"text","text":"at least"}]},{"type":"text","text":" a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":", which is the default version of the dependency that is used when"},{"type":"text","text":" "},{"type":"text","text":"running on a device or simulator. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":" protocol inherits from a base protocol,"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey"},{"type":"text","text":", which has two other optional properties that can be implemented"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":", both of which will"},{"type":"text","text":" "},{"type":"text","text":"delegate to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":" if left unimplemented."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Leveraging these alternative dependency implementations allow to run your features in safer"},{"type":"text","text":" "},{"type":"text","text":"environments for tests, previews, and more."}]},{"anchor":"Live-value","level":2,"type":"heading","text":"Live value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":" static property from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":" protocol is the only"},{"type":"text","text":" "},{"type":"text","text":"truly "},{"type":"emphasis","inlineContent":[{"type":"text","text":"required"}]},{"type":"text","text":" requirement from the protocol. This is the value that is used when running your"},{"type":"text","text":" "},{"type":"text","text":"feature in the simulator or on a device. It is appropriate to use an implementation of your"},{"type":"text","text":" "},{"type":"text","text":"dependency for this value that actually interacts with the outside world. That is, it can make"},{"type":"text","text":" "},{"type":"text","text":"network requests, perform time-based asynchrony, interact with the file system, and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you only implement "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":", then it means your feature will use the"},{"type":"text","text":" "},{"type":"text","text":"live dependency when run in tests, which can be problematic. That will cause live API requests to be"},{"type":"text","text":" "},{"type":"text","text":"made, which are slow and flakey, analytics will be tracked, which will muddy your data, files will"},{"type":"text","text":" "},{"type":"text","text":"be written to disk, which will bleed into other tests, and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using live dependencies in tests are so problematic that the library will cause a test failure"},{"type":"text","text":" "},{"type":"text","text":"if you ever interact with a live dependency while tests are running:"}]},{"type":"codeListing","syntax":"swift","code":["func testFeature() async throws {","  let model = FeatureModel()","","  model.addButtonTapped()","  \/\/ 🛑  A dependency has no test implementation, but was accessed from a ","  \/\/     test context:","  \/\/","  \/\/         Dependency:","  \/\/           APIClient","  \/\/","  \/\/     Dependencies registered with the library are not allowed to use ","  \/\/     their default, live implementations when run from tests.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you truly want to use"},{"type":"text","text":" "},{"type":"text","text":"live dependencies in tests you have to make it explicit by overriding the dependency using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-3vrqy"},{"type":"text","text":" and setting the live value:"}]},{"type":"codeListing","syntax":"swift","code":["func testFeature() async throws {","  let model = withDependencies {","    \/\/ ⚠️ Explicitly say you want to use a live dependency.","    $0.apiClient = .liveValue","  } operation: {","    FeatureModel()","  }","","  \/\/ ...","}"]},{"anchor":"Test-value","level":2,"type":"heading","text":"Test value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" static property from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey"},{"type":"text","text":" protocol should"},{"type":"text","text":" "},{"type":"text","text":"be implemented if you want to provide a specific implementation of your dependency for all tests. At"},{"type":"text","text":" "},{"type":"text","text":"a bare minimum you should provide an implementation of your dependency that does not reach out to"},{"type":"text","text":" "},{"type":"text","text":"the real world. This means it should not make network requests, should not sleep for real-world"},{"type":"text","text":" "},{"type":"text","text":"time, should not touch the file system, etc."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can guarantee that a whole class of bugs do not happen in your code when running tests. For"},{"type":"text","text":" "},{"type":"text","text":"example, suppose you have a dependency for tracking user events with your analytics server. If you"},{"type":"text","text":" "},{"type":"text","text":"allow this dependency to be used in an uncontrolled manner in tests you run the risk of accidentally"},{"type":"text","text":" "},{"type":"text","text":"tracking events that do not actually correspond to user actions, and therefore will result in bad,"},{"type":"text","text":" "},{"type":"text","text":"unreliable data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another example of a dependency you want to control during tests is access to the file system. If"},{"type":"text","text":" "},{"type":"text","text":"your feature writes a file to disk during a test, then that file will remain there for subsequent"},{"type":"text","text":" "},{"type":"text","text":"runs of other tests. This causes testing artifacts to bleed over into other tests, which can cause"},{"type":"text","text":" "},{"type":"text","text":"confusing failures."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, providing a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" can be very useful, but even better, we highly"},{"type":"text","text":" "},{"type":"text","text":"encourage users of our library to provide what is known as “unimplemented” versions of their"},{"type":"text","text":" "},{"type":"text","text":"dependencies for their "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":". These are implementations that cause a test"},{"type":"text","text":" "},{"type":"text","text":"failure if any of its endpoints are invoked."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use our "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay"},{"type":"text","text":" library to aid in this, which is"},{"type":"text","text":" "},{"type":"text","text":"immediately accessible as a transitive dependency. It comes with a function called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/pointfreeco.github.io\/xctest-dynamic-overlay\/main\/documentation\/xctestdynamicoverlay\/unimplemented(_:fileid:line:)-5098a"},{"type":"text","text":" that can return a function of nearly any signature with the"},{"type":"text","text":" "},{"type":"text","text":"property that if it is invoked it will cause a test failure. For example, the hypothetical analytics"},{"type":"text","text":" "},{"type":"text","text":"dependency we considered a moment ago can be given such a "},{"type":"codeVoice","code":"testValue"},{"type":"text","text":" like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct AnalyticsClient {","  var track: (String, [String: String]) async throws -> Void","}","","import Dependencies","","extension AnalyticsClient: DependencyKey {","  static let testValue = Self(","    track: unimplemented(\"AnalyticsClient.track\")","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This makes it so that if your feature ever makes use of the "},{"type":"codeVoice","code":"track"},{"type":"text","text":" endpoint on the analytics client"},{"type":"text","text":" "},{"type":"text","text":"without you specifically overriding it, you will get a test failure. This makes it easy to be"},{"type":"text","text":" "},{"type":"text","text":"notified if you ever start tracking new events without writing a test for it, which can be"},{"type":"text","text":" "},{"type":"text","text":"incredibly powerful."}]},{"anchor":"Preview-value","level":2,"type":"heading","text":"Preview value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ve now seen that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":" is an appropriate place to put dependency"},{"type":"text","text":" "},{"type":"text","text":"implementations that reach out to the outside world, and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" is an"},{"type":"text","text":" "},{"type":"text","text":"appropriate place to put dependency implementations that refrain from interacting with the outside"},{"type":"text","text":" "},{"type":"text","text":"world. Even better if the "},{"type":"codeVoice","code":"testValue"},{"type":"text","text":" actually causes a test failure if any of its endpoints are"},{"type":"text","text":" "},{"type":"text","text":"accessed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s a third kind of implementation that you can provide that sits somewhere between"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":": it’s called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":". It will be used whenever your feature is run in an Xcode"},{"type":"text","text":" "},{"type":"text","text":"preview."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Previews are similar to tests in that you usually do not want to interact with the outside world,"},{"type":"text","text":" "},{"type":"text","text":"such as making network requests. In fact, many of Apple’s frameworks do not work in previews, such"},{"type":"text","text":" "},{"type":"text","text":"as Core Location, and so it will be hard to interact with your feature in previews if it touches"},{"type":"text","text":" "},{"type":"text","text":"those frameworks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, previews are dissimilar to tests in that it’s fine for dependencies to return some mock"},{"type":"text","text":" "},{"type":"text","text":"data. There’s no need to deal with “unimplemented” clients for proving which dependencies are"},{"type":"text","text":" "},{"type":"text","text":"actually used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have an API client with some endpoints for fetching users. You do not want"},{"type":"text","text":" "},{"type":"text","text":"to make live, network requests in Swift previews because that will cause previews to run slowly. So,"},{"type":"text","text":" "},{"type":"text","text":"you can provide a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":" implementation that synchronously and"},{"type":"text","text":" "},{"type":"text","text":"immediately returns some mock data:"}]},{"type":"codeListing","syntax":"swift","code":["extension APIClient: TestDependencyKey {","  static let previewValue = Self(","    fetchUsers: {","      [","        User(id: 1, name: \"Blob\"),","        User(id: 1, name: \"Blob Jr.\"),","        User(id: 1, name: \"Blob Sr.\"),","      ]","    },","    fetchUser: { id in","      User(id: id, name: \"Blob, id: \\(id)\")","    }","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when running a feature that uses this dependency in an Xcode preview, it will immediately get"},{"type":"text","text":" "},{"type":"text","text":"data provided to it, making it easier for you to iterate on your feature’s logic and styling."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also always override dependencies for the preview if you want to test out a specific"},{"type":"text","text":" "},{"type":"text","text":"configuration of data. For example, if you want to test the empty state of your feature when the"},{"type":"text","text":" "},{"type":"text","text":"API client returns an empty array, you can do so like this:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some View {","    FeatureView(","      model: withDependencies {","        $0.apiClient.fetchUsers = { _ in [] }","      } operation: {","        FeatureModel()","      }","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if you want to preview how your feature deals with errors returned from the API:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some View {","    FeatureView(","      model: withDependencies {","        $0.apiClient.fetchUser = { _ in","          struct SomeError: Error {}","          throw SomeError()","        }","      } operation: {","        FeatureModel()","      }","    )","  }","}"]},{"anchor":"Separating-interface-and-implementation","level":2,"type":"heading","text":"Separating interface and implementation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is common for the interface of an dependency to be super lightweight and compile quickly (as"},{"type":"text","text":" "},{"type":"text","text":"usually it consists of some simple data types), but for the “live” implementation to be heavyweight"},{"type":"text","text":" "},{"type":"text","text":"and take a long time to compile (usually when 3rd party libraries are involved). In such cases it is"},{"type":"text","text":" "},{"type":"text","text":"recommended to put the interface and live implementation in separate modules, and then"},{"type":"text","text":" "},{"type":"text","text":"implementation can depend on the interface."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to accomplish this you can conform your dependency to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey"},{"type":"text","text":" protocol in"},{"type":"text","text":" "},{"type":"text","text":"the interface module, like this:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Module: AnalyticsClient","struct AnalyticsClient: TestDependencyKey {","  \/\/ ...","","  static let testValue = Self(\/* ... *\/)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the implementation module you can extend the dependency to further conform to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":" protocol and provide a live implementation:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Module: LiveAnalyticsClient","extension AnalyticsClient: DependencyKey {","  static let liveValue = Self(\/* ... *\/)","}"]},{"anchor":"Cascading-rules","level":2,"type":"heading","text":"Cascading rules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on which of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":" you implement, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" depending on which conformance to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":" is visible to the compiler, there are rules that decide"},{"type":"text","text":" "},{"type":"text","text":"which actual dependency will be used at runtime."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A default implementation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" is provided, and it simply calls out"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":". This means that in a testing context, the preview"},{"type":"text","text":" "},{"type":"text","text":"version of the dependency will be used."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if a conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":" is provided in addition to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":" has a default implementation provided, and it"},{"type":"text","text":" "},{"type":"text","text":"calls out to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":". This means that in a preview context, the live version"},{"type":"text","text":" "},{"type":"text","text":"of the dependency will be used."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that a consequence of the above two rules is that if only "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"implemented when conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey"},{"type":"text","text":", then both "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":" will call out to the "},{"type":"codeVoice","code":"liveValue"},{"type":"text","text":" under the hood. This means"},{"type":"text","text":" "},{"type":"text","text":"your dependency will be interacting with the outside world during tests and in previews, which may"},{"type":"text","text":" "},{"type":"text","text":"not be ideal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one thing the library will do to help you catch using a live dependency in tests. If a live"},{"type":"text","text":" "},{"type":"text","text":"dependency is used in a test context, the test case will fail. This is done to make sure you"},{"type":"text","text":" "},{"type":"text","text":"understand the risks of using a live dependency in tests. To confirm that you truly want to use a"},{"type":"text","text":" "},{"type":"text","text":"live dependency you can override the dependency with "},{"type":"codeVoice","code":".liveValue"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func testFeature() {","  let model = withDependencies {","    $0.apiClient = .liveValue  \/\/ ⬅️","  } operation: {","    FeatureModel()","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will prevent the library from failing your test for using a live dependency in a testing"},{"type":"text","text":" "},{"type":"text","text":"context."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On the flip side, the library also helps you catch when you have not provided a "},{"type":"codeVoice","code":"liveValue"},{"type":"text","text":". When"},{"type":"text","text":" "},{"type":"text","text":"running the application in the simulator or on a device, if a dependency is accessed for which a"},{"type":"text","text":" "},{"type":"codeVoice","code":"liveValue"},{"type":"text","text":" has not been provided, a purple, runtime warning will appear in Xcode letting you know."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/dependencies\/livepreviewtest"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Dependencies\/documentation\/Dependencies\/LivePreviewTest","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to provide different implementations of your dependencies for use in the live application,"},{"type":"text","text":" "},{"type":"text","text":"as well as in Xcode previews, and even in tests."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Live, preview, and test dependencies","role":"article","modules":[{"name":"Dependencies"}]},"hierarchy":{"paths":[["doc:\/\/Dependencies\/documentation\/Dependencies"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Dependencies\/documentation\/Dependencies\/UsingDependencies","doc:\/\/Dependencies\/documentation\/Dependencies\/RegisteringDependencies"],"generated":true}],"references":{"doc://Dependencies/documentation/Dependencies/withDependencies(_:operation:)-3vrqy":{"role":"symbol","title":"withDependencies(_:operation:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withDependencies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Updates the current dependencies for the duration of an asynchronous operation."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-3vrqy","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/withdependencies(_:operation:)-3vrqy"},"doc://Dependencies/documentation/Dependencies":{"role":"collection","title":"Dependencies","abstract":[{"type":"text","text":"A dependency management library inspired by SwiftUI’s “environment.”"}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies","kind":"symbol","type":"topic","url":"\/documentation\/dependencies"},"doc://Dependencies/documentation/Dependencies/TestDependencyKey/previewValue-8u2sy":{"defaultImplementations":2,"role":"symbol","title":"previewValue","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"previewValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The preview value for the dependency key."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/dependencies\/testdependencykey\/previewvalue-8u2sy"},"doc://Dependencies/documentation/Dependencies/TestDependencyKey":{"role":"symbol","title":"TestDependencyKey","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestDependencyKey"}],"abstract":[{"type":"text","text":"A key for accessing test dependencies."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestDependencyKey"}],"url":"\/documentation\/dependencies\/testdependencykey"},"http://github.com/pointfreeco/xctest-dynamic-overlay":{"title":"XCTestDynamicOverlay","titleInlineContent":[{"type":"text","text":"XCTestDynamicOverlay"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay","url":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay"},"https://pointfreeco.github.io/xctest-dynamic-overlay/main/documentation/xctestdynamicoverlay/unimplemented(_:fileid:line:)-5098a":{"title":"unimplemented","titleInlineContent":[{"type":"codeVoice","code":"unimplemented"}],"type":"link","identifier":"https:\/\/pointfreeco.github.io\/xctest-dynamic-overlay\/main\/documentation\/xctestdynamicoverlay\/unimplemented(_:fileid:line:)-5098a","url":"https:\/\/pointfreeco.github.io\/xctest-dynamic-overlay\/main\/documentation\/xctestdynamicoverlay\/unimplemented(_:fileid:line:)-5098a"},"doc://Dependencies/documentation/Dependencies/TestDependencyKey/testValue":{"defaultImplementations":1,"role":"symbol","title":"testValue","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"testValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The test value for the dependency key."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/testValue","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/dependencies\/testdependencykey\/testvalue"},"doc://Dependencies/documentation/Dependencies/DependencyKey/liveValue":{"role":"symbol","title":"liveValue","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"liveValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The live value for the dependency key."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey\/liveValue","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/dependencies\/dependencykey\/livevalue"},"doc://Dependencies/documentation/Dependencies/DependencyKey":{"role":"symbol","title":"DependencyKey","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DependencyKey"}],"abstract":[{"type":"text","text":"A key for accessing dependencies."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DependencyKey"}],"url":"\/documentation\/dependencies\/dependencykey"},"doc://Dependencies/documentation/Dependencies/UsingDependencies":{"role":"article","title":"Using dependencies","abstract":[{"type":"text","text":"Learn how to use the dependencies that are registered with the library."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/UsingDependencies","kind":"article","type":"topic","url":"\/documentation\/dependencies\/usingdependencies"},"doc://Dependencies/documentation/Dependencies/RegisteringDependencies":{"role":"article","title":"Registering dependencies","abstract":[{"type":"text","text":"Learn how to register your own dependencies with the library so that they immediately become"},{"type":"text","text":" "},{"type":"text","text":"available from any part of your code base."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/RegisteringDependencies","kind":"article","type":"topic","url":"\/documentation\/dependencies\/registeringdependencies"}}}