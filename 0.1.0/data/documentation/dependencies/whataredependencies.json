{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dependencies in an application are the types and functions that need to interact with outside"},{"type":"text","text":" "},{"type":"text","text":"systems that you do not control. Classic examples of this are API clients that make network requests"},{"type":"text","text":" "},{"type":"text","text":"to servers, but also seemingly innocuous things such as the "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" initializers, and even"},{"type":"text","text":" "},{"type":"text","text":"clocks and timers, can be thought of as dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By controlling the dependencies our features need to do their jobs we gain the ability to completely"},{"type":"text","text":" "},{"type":"text","text":"alter the execution context a feature runs in. This means in tests and Xcode previews you can"},{"type":"text","text":" "},{"type":"text","text":"provide a mock version of an API client that immediately returns some stubbed data rather than"},{"type":"text","text":" "},{"type":"text","text":"making a live network request to a server."}]},{"anchor":"The-need-for-controlled-dependencies","level":2,"type":"heading","text":"The need for controlled dependencies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose that you are building a feature that displays a message to the user after 10 seconds. This"},{"type":"text","text":" "},{"type":"text","text":"logic can be packaged up into an observable object:"}]},{"type":"codeListing","syntax":"swift","code":["final class FeatureModel: ObservableObject {","  @Published var message: String?","","  func onAppear() async {","    do {","      try await Task.sleep(for: .seconds(10))","      self.message = \"Welcome!\"","    } catch {}","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And a view can make use of that model:"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  @ObservedObject var model: FeatureModel","","  var body: some View {","    Form {","      if let message = self.model.message {","        Text(message)","      }","","      \/\/ ...","    }","    .task { await self.model.onAppear() }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code works just fine at first, but it has some problems:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, if you want to iterate on the styling of the message in an Xcode preview you will have to"},{"type":"text","text":" "},{"type":"text","text":"wait for 10 whole seconds of real world time to pass before the message appears. This completely"},{"type":"text","text":" "},{"type":"text","text":"destroys the fast, iterative nature of previews."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Second, if you want to write a test for this feature, you will again have to wait for 10 whole"},{"type":"text","text":" "},{"type":"text","text":"seconds of real world time to pass. This slows down your test suite, making it less likely you will"},{"type":"text","text":" "},{"type":"text","text":"add new tests in the future if the whole suite takes a long time to run."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The reason this code does not play nicely with Xcode previews or tests is because it has an"},{"type":"text","text":" "},{"type":"text","text":"uncontrolled dependency on an outside system: "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":". That API can only sleep for a real world"},{"type":"text","text":" "},{"type":"text","text":"amount of time."}]},{"anchor":"Controlling-the-dependency","level":2,"type":"heading","text":"Controlling the dependency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It would be far better if we could swap out different notions of “sleeping” in our feature so that"},{"type":"text","text":" "},{"type":"text","text":"when run in the simulator or device, "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" could be used, but in previews or tests other"},{"type":"text","text":" "},{"type":"text","text":"forms of sleeping could be used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tool to do this is known as the "},{"type":"codeVoice","code":"Clock"},{"type":"text","text":" protocol, which is a tool from the Swift standard"},{"type":"text","text":" "},{"type":"text","text":"library. Instead of reaching out to "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" directly, we can “inject” our dependency on"},{"type":"text","text":" "},{"type":"text","text":"time-based asynchrony by holding onto a clock in the feature’s model by using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/Dependency"},{"type":"text","text":" "},{"type":"text","text":"property  wrapper and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyValues\/continuousClock"},{"type":"text","text":" dependency value:"}]},{"type":"codeListing","syntax":"swift","code":["final class FeatureModel: ObservableObject {","  @Published var message: String?","  @Dependency(\\.continuousClock) var clock","","  func onAppear() async {","    do {","      try await self.clock.sleep(for: .seconds(10))","      self.message = \"Welcome!\"","    } catch {}","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That small change makes this feature much friendlier to Xcode previews and testing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For previews, you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m"},{"type":"text","text":" to override the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyValues\/continuousClock"},{"type":"text","text":" dependency to be an “immediate” clock, which is a clock that"},{"type":"text","text":" "},{"type":"text","text":"does not actually sleep for any amount of time:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some View {","    FeatureView(","      model: withDependencies {","        $0.continuousClock = ImmediateClock()","      } operation: {","        FeatureModel()","      }","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will cause the message to appear immediately. No need to wait 10 seconds."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have a "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.pointfree.co\/collections\/concurrency\/clocks"},{"type":"text","text":" discussing the "},{"type":"codeVoice","code":"Clock"},{"type":"text","text":" protocol in depth"},{"type":"text","text":" "},{"type":"text","text":"and showing how it can be used to control time-based asynchrony."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, in tests you can also override the clock dependency to use an immediate clock, also using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m"},{"type":"text","text":" helper:"}]},{"type":"codeListing","syntax":"swift","code":["func testMessage() async {","  let model = withDependencies {","    $0.continuousClock = ImmediateClock()","  } operation: {","    FeatureModel()","  }","","  XCTAssertEqual(model.message, nil)","  await model.onAppear()","  XCTAssertEqual(model.message, \"Welcome!\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test will pass quickly, and deterministically, 100% of the time. This is why it is so"},{"type":"text","text":" "},{"type":"text","text":"important to control dependencies that interact with outside systems."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/dependencies\/whataredependencies"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Dependencies\/documentation\/Dependencies\/WhatAreDependencies","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn what dependencies are, how they complicate your code, and why you want to control them."}],"kind":"article","metadata":{"roleHeading":"Article","title":"What are dependencies?","role":"article","modules":[{"name":"Dependencies"}]},"hierarchy":{"paths":[["doc:\/\/Dependencies\/documentation\/Dependencies"]]},"seeAlsoSections":[{"title":"Getting started","identifiers":["doc:\/\/Dependencies\/documentation\/Dependencies\/QuickStart"],"generated":true}],"references":{"doc://Dependencies/documentation/Dependencies/QuickStart":{"role":"article","title":"Quick start","abstract":[{"type":"text","text":"Learn the basics of getting started with the library before diving deep into all of its features."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/QuickStart","kind":"article","type":"topic","url":"\/documentation\/dependencies\/quickstart"},"doc://Dependencies/documentation/Dependencies/DependencyValues/continuousClock":{"role":"symbol","title":"continuousClock","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"continuousClock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Clock","preciseIdentifier":"s:12_Concurrency5ClockP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"The current clock that features should use when a "},{"type":"codeVoice","code":"ContinuousClock"},{"type":"text","text":" would be appropriate."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DependencyValues\/continuousClock","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/dependencyvalues\/continuousclock"},"doc://Dependencies/documentation/Dependencies/Dependency":{"role":"symbol","title":"Dependency","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dependency"}],"abstract":[{"type":"text","text":"A property wrapper for accessing dependencies."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/Dependency","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Dependency"}],"url":"\/documentation\/dependencies\/dependency"},"doc://Dependencies/documentation/Dependencies":{"role":"collection","title":"Dependencies","abstract":[{"type":"text","text":"A dependency management library inspired by SwiftUI’s “environment.”"}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies","kind":"symbol","type":"topic","url":"\/documentation\/dependencies"},"https://www.pointfree.co/collections/concurrency/clocks":{"title":"series of episodes","titleInlineContent":[{"type":"text","text":"series of episodes"}],"type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/concurrency\/clocks","url":"https:\/\/www.pointfree.co\/collections\/concurrency\/clocks"},"doc://Dependencies/documentation/Dependencies/withDependencies(_:operation:)-4uz6m":{"role":"symbol","title":"withDependencies(_:operation:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withDependencies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Updates the current dependencies for the duration of a synchronous operation."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/withdependencies(_:operation:)-4uz6m"}}}