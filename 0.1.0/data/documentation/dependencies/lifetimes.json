{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/Dependency"},{"type":"text","text":" property wrapper is initialized it captures the current state of the"},{"type":"text","text":" "},{"type":"text","text":"dependency at that moment. This provides a kind of ‚Äúscoping‚Äù mechanism that is similar to how"},{"type":"text","text":" "},{"type":"codeVoice","code":"@TaskLocal"},{"type":"text","text":" values are inherited by new asynchronous tasks, but has some new caveats of its own."}]},{"anchor":"How-task-locals-work","level":2,"type":"heading","text":"How task locals work"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Task locals are what power this library under the hood, and so it can be important to first"},{"type":"text","text":" "},{"type":"text","text":"understand how task locals work and how task local inheritance works."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Task locals are values that are implicitly associated with a task. They make it possible to push"},{"type":"text","text":" "},{"type":"text","text":"values deep into every part of an application without having to explicitly pass the values around."},{"type":"text","text":" "},{"type":"text","text":"This makes task locals sound like a ‚Äúglobal‚Äù variable, which you may have heard is bad, but task"},{"type":"text","text":" "},{"type":"text","text":"locals have 3 features that make them safe to use and easy to reason about:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Task locals are safe to use from concurrent contexts. This means multiple tasks can access the"},{"type":"text","text":" "},{"type":"text","text":"same task local without fear of a race condition."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Task locals can be mutated only in specific, well-defined scopes. It is not allowed to forever"},{"type":"text","text":" "},{"type":"text","text":"mutate a task local in a way that all parts of the application observe the change."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Task locals are inherited by new tasks that are spun up from existing tasks."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you had the following task local:"}]},{"type":"codeListing","syntax":"swift","code":["enum Locals {","  @TaskLocal static var value = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value can only be ‚Äúmutated‚Äù by using the task locals "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/tasklocal\/withvalue(_:operation:file:line:)-1xjor"},{"type":"text","text":" "},{"type":"text","text":"method, which allows changing "},{"type":"codeVoice","code":"value"},{"type":"text","text":" only for the scope of a non-escaping closure:"}]},{"type":"codeListing","syntax":"swift","code":["print(Locals.value)  \/\/ 1","Locals.$value.withValue(42) {","  print(Locals.value)  \/\/ 42","}","print(Locals.value)  \/\/ 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above shows that "},{"type":"codeVoice","code":"Locals.value"},{"type":"text","text":" is changed only for the duration of the "},{"type":"codeVoice","code":"withValue"},{"type":"text","text":" closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This may seem very restrictive, but it is also what makes task locals safe and easy to reason about."},{"type":"text","text":" "},{"type":"text","text":"You are not allowed to make task local changes to extend for any amount of time, such as mutating it"},{"type":"text","text":" "},{"type":"text","text":"directly:"}]},{"type":"codeListing","syntax":"swift","code":["Locals.value = 42","\/\/ üõë Cannot assign to property: 'value' is a get-only property"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If this were possible it would make changes to "},{"type":"codeVoice","code":"value"},{"type":"text","text":" instantly observable from every part of the"},{"type":"text","text":" "},{"type":"text","text":"application. It could even cause two consecutive reads of "},{"type":"codeVoice","code":"Locals.value"},{"type":"text","text":" to report different values:"}]},{"type":"codeListing","syntax":"swift","code":["print(Locals.value)  \/\/ 1","print(Locals.value)  \/\/ 42"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would make code very difficult to reason about, and so is why task locals can be changed for"},{"type":"text","text":" "},{"type":"text","text":"only very specific scopes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there is a tool that Swift provides that allows task locals to prolong their changes"},{"type":"text","text":" "},{"type":"text","text":"outside the scope of a non-escaping closure, and does so in a way without making it difficult to"},{"type":"text","text":" "},{"type":"text","text":"reason about. That tool is known as ‚Äútask local inheritance.‚Äù Any child tasks created via"},{"type":"text","text":" "},{"type":"codeVoice","code":"TaskGroup"},{"type":"text","text":" or "},{"type":"codeVoice","code":"async let"},{"type":"text","text":", as well as tasks created with "},{"type":"codeVoice","code":"Task { }"},{"type":"text","text":", inherit the task locals at the"},{"type":"text","text":" "},{"type":"text","text":"moment they were created."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following example shows that a task local remains overridden even when accessed"},{"type":"text","text":" "},{"type":"text","text":"from a "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" a second later, and even though that closure is escaping:"}]},{"type":"codeListing","syntax":"swift","code":["enum Locals {","  @TaskLocal static var value = 1","}","","print(Locals.value)  \/\/ 1","Locals.$value.withValue(42) {","  print(Locals.value)  \/\/ 42","  Task {","    try await Task.sleep(for: .seconds(1)","    print(Locals.value)  \/\/ 42","  }","  print(Locals.value)  \/\/ 42","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though the closure handed to "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" is escaping, and even though the print happens long after"},{"type":"text","text":" "},{"type":"codeVoice","code":"withValue"},{"type":"text","text":"‚Äôs scope has ended, somehow still ‚Äú42‚Äù is printed. This happens because task locals are"},{"type":"text","text":" "},{"type":"text","text":"inherited in tasks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives us the ability to prolong the lifetime of a task local change, but in a well-defined and"},{"type":"text","text":" "},{"type":"text","text":"easy to reason about way."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that task locals are not inherited in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" escaping contexts. It does work"},{"type":"text","text":" "},{"type":"text","text":"for "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/init(priority:operation:)-5k89c"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtask(priority:operation:)"},{"type":"text","text":", which make use of"},{"type":"text","text":" "},{"type":"text","text":"escaping closures, but only because the standard library special cases those tools to inherit task"},{"type":"text","text":" "},{"type":"text","text":"locals (see "},{"type":"codeVoice","code":"copyTaskLocals"},{"type":"text","text":" in "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift\/blob\/60952b868d46fc9a83619f747a7f92b5534fb632\/stdlib\/public\/Concurrency\/Task.swift#L500-L509"},{"type":"text","text":" code)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But generally speaking, task local overrides are lost when crossing escaping boundaries. For"},{"type":"text","text":" "},{"type":"text","text":"example, if instead of using "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" we used "},{"type":"codeVoice","code":"DispatchQueue.main.asyncAfter"},{"type":"text","text":" in the above code, we"},{"type":"text","text":" "},{"type":"text","text":"will observe that the task local resets back to 1 in the escaped closure:"}]},{"type":"codeListing","syntax":"swift","code":["print(Locals.value)  \/\/ 1","Locals.$value.withValue(42) {","  print(Locals.value)  \/\/ 42","  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {","    print(Locals.value)  \/\/ 1","  }","  print(Locals.value)  \/\/ 42","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, in conclusion, Swift does extra work to propagate task locals to certain escaping, unstructured"},{"type":"text","text":" "},{"type":"text","text":"contexts, but does not do so universally, and so care must be taken."}]},{"anchor":"How-Dependency-lifetimes-work","level":2,"type":"heading","text":"How @Dependency lifetimes work"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we understand how task locals work, we can begin to understand how "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" lifetimes"},{"type":"text","text":" "},{"type":"text","text":"work, and how they can be extended. Under the hood, dependencies are held as a "},{"type":"codeVoice","code":"@TaskLocal"},{"type":"text","text":", and so"},{"type":"text","text":" "},{"type":"text","text":"many of the rules from task locals also apply to dependencies, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":" dependencies are inherited in"},{"type":"text","text":" "},{"type":"text","text":"tasks but not generally across escaping boundaries. But there are a few additional caveats."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just like with task locals, a dependency‚Äôs value can be changed for the scope of the trailing,"},{"type":"text","text":" "},{"type":"text","text":"non-escaping closure of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m"},{"type":"text","text":", but the library also ships"},{"type":"text","text":" "},{"type":"text","text":"with a few tools to prolong the change in a well-defined manner."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a feature that needs access to an API client for fetching a user:"}]},{"type":"codeListing","syntax":"swift","code":["class FeatureModel: ObservableObject {","  @Dependency(\\.apiClient) var apiClient","","  func onAppear() async {","    do {","      self.user = try await self.apiClient.fetchUser()","    } catch {}","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes we may want to construct this model in a ‚Äúcontrolled‚Äù environment, where we use a"},{"type":"text","text":" "},{"type":"text","text":"different implementation of "},{"type":"codeVoice","code":"apiClient"},{"type":"text","text":". Tests are probably the most prototypical example of this."},{"type":"text","text":" "},{"type":"text","text":"In tests we do not want to make a live network request since that opens up to the vagaries of the"},{"type":"text","text":" "},{"type":"text","text":"outside world, and instead we want to provide an implementation of the "},{"type":"codeVoice","code":"apiClient"},{"type":"text","text":" that"},{"type":"text","text":" "},{"type":"text","text":"synchronously and immediately return some data so that you can test how that data flows through your"},{"type":"text","text":" "},{"type":"text","text":"features logic."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library comes with a helper in order to do this and it‚Äôs called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m"},{"type":"text","text":". It takes two closures: the first allows you"},{"type":"text","text":" "},{"type":"text","text":"to override any dependencies you want, and the second allows you to execute your feature‚Äôs logic in"},{"type":"text","text":" "},{"type":"text","text":"a scope where those dependency mutations are applied:"}]},{"type":"codeListing","syntax":"swift","code":["func testOnAppear() async {","  await withDependencies {","    $0.apiClient.fetchUser = { _ in User(id: 42, name: \"Blob\") }","  } operation: {","    let model = FeatureModel()","    XCTAssertEqual(model.user, nil)","    await model.onAppear()","    XCTAssertEqual(model.user, User(id: 42, name: \"Blob\"))","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All code executed in the "},{"type":"codeVoice","code":"operation"},{"type":"text","text":" trailing closure of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m"},{"type":"text","text":" will use the overridden "},{"type":"codeVoice","code":"fetchUser"},{"type":"text","text":" "},{"type":"text","text":"endpoint, which makes it possible to exercise the feature‚Äôs code without making a real network"},{"type":"text","text":" "},{"type":"text","text":"request."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, we can take this one step further. We don‚Äôt need to execute the entire test in the scope of the"},{"type":"text","text":" "},{"type":"text","text":"trailing "},{"type":"codeVoice","code":"operation"},{"type":"text","text":" closure. We only need to construct the model in that scope, and then as long as"},{"type":"text","text":" "},{"type":"text","text":"all dependencies are declared in "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":" as instance variables, all interactions with the"},{"type":"text","text":" "},{"type":"text","text":"model will use the controlled dependencies, even outside the "},{"type":"codeVoice","code":"operation"},{"type":"text","text":" closure:"}]},{"type":"codeListing","syntax":"swift","code":["func testOnAppear() async {","  let model = withDependencies {","    $0.apiClient.fetchUser = { _ in User(id: 42, name: \"Blob\") }","  } operation: {","    FeatureModel()","  }","","  XCTAssertEqual(model.user, nil)","  await model.onAppear()","  XCTAssertEqual(model.user, User(id: 42, name: \"Blob\"))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is one way in which "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" can propagate changes outside of its standard scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Controlling dependencies isn‚Äôt only useful in tests. It can also be used directly in your feature‚Äôs"},{"type":"text","text":" "},{"type":"text","text":"logic in order to run some child feature in a controlled environment, and can even be used in Xcode"},{"type":"text","text":" "},{"type":"text","text":"previews."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let‚Äôs first see how controlling dependencies can be used directly in a feature‚Äôs logic. Suppose we"},{"type":"text","text":" "},{"type":"text","text":"wanted to show this feature in the application as a part of an ‚Äúonboarding‚Äù experience. During the"},{"type":"text","text":" "},{"type":"text","text":"onboarding experience, we want the user to be able to make use of the feature without executing real"},{"type":"text","text":" "},{"type":"text","text":"life API requests, which may cause data to be written to a remote database."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Accomplishing this can be difficult because models are created in one scope and then dependencies"},{"type":"text","text":" "},{"type":"text","text":"are used in another scope. However, as mentioned above, the library does extra work to make it so"},{"type":"text","text":" "},{"type":"text","text":"that later referencing dependencies of a model uses the dependencies captured at the moment of"},{"type":"text","text":" "},{"type":"text","text":"creating the model."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you create the features model in the following way:"}]},{"type":"codeListing","syntax":"swift","code":["let onboardingModel = withDependencies {","  $0.apiClient = .mock","} operation: {","  FeatureModel()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"‚Ä¶then all references to the "},{"type":"codeVoice","code":"apiClient"},{"type":"text","text":" dependency inside "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":" will be using the mock"},{"type":"text","text":" "},{"type":"text","text":"API client. This is true even though the "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":"‚Äôs "},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" method will be called outside"},{"type":"text","text":" "},{"type":"text","text":"the scope of the "},{"type":"codeVoice","code":"operation"},{"type":"text","text":" closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, care must be taken when creating a child model from a parent model. In order for the"},{"type":"text","text":" "},{"type":"text","text":"child‚Äôs dependencies to inherit from the parent‚Äôs dependencies, you must make use of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(from:operation:file:line:)-8e74m"},{"type":"text","text":" when creating the child model:"}]},{"type":"codeListing","syntax":"swift","code":["let onboardingModel = withDependencies(from: self) {","  $0.apiClient = .mock","} operation: {","  FeatureModel()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This makes "},{"type":"codeVoice","code":"FeatureModel"},{"type":"text","text":"‚Äôs dependencies inherit from the parent feature, and you can further"},{"type":"text","text":" "},{"type":"text","text":"override any additional dependencies you want."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In general, if you want dependencies to be properly inherited through every layer of feature in your"},{"type":"text","text":" "},{"type":"text","text":"application, you should make sure to create any "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" models inside a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(from:operation:file:line:)-8e74m"},{"type":"text","text":" scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you do this, it also allows you to run previews in a very specific environment. Dependencies"},{"type":"text","text":" "},{"type":"text","text":"already support the concept of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":", which is an"},{"type":"text","text":" "},{"type":"text","text":"implementation of the dependency used when run in an Xcode preview (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/LivePreviewTest"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"text","text":"more info). It is most appropriate to implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy"},{"type":"text","text":" by"},{"type":"text","text":" "},{"type":"text","text":"immediately returning some basic, mock data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But sometimes you want to customize dependencies for the preview so that you can see how your"},{"type":"text","text":" "},{"type":"text","text":"feature behaves in very specific states. For example, if you wanted to see how your feature reacts"},{"type":"text","text":" "},{"type":"text","text":"when the "},{"type":"codeVoice","code":"fetchUser"},{"type":"text","text":" endpoint throws an error, you can update the preview like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some View {","    FeatureView(","      model: withDependencies {","        $0.apiClient.fetchUser = { _ in","          struct SomeError: Error {}","          throw SomeError()","        }","      } operation: {","        FeatureModel()","      }","    )","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/dependencies\/lifetimes"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Dependencies\/documentation\/Dependencies\/Lifetimes","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn about the lifetimes of dependencies, how to prolong the lifetime of a dependency, and how"},{"type":"text","text":" "},{"type":"text","text":"dependencies are inherited."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Dependency lifetimes","role":"article","modules":[{"name":"Dependencies"}]},"hierarchy":{"paths":[["doc:\/\/Dependencies\/documentation\/Dependencies"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Dependencies\/documentation\/Dependencies\/DesigningDependencies","doc:\/\/Dependencies\/documentation\/Dependencies\/OverridingDependencies","doc:\/\/Dependencies\/documentation\/Dependencies\/SingleEntryPointSystems"],"generated":true}],"references":{"doc://Dependencies/documentation/Dependencies/DesigningDependencies":{"role":"article","title":"Designing dependencies","abstract":[{"type":"text","text":"Learn techniques on designing your dependencies so that they are most flexible for injecting into"},{"type":"text","text":" "},{"type":"text","text":"features and overriding for tests."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/DesigningDependencies","kind":"article","type":"topic","url":"\/documentation\/dependencies\/designingdependencies"},"doc://Dependencies/documentation/Dependencies":{"role":"collection","title":"Dependencies","abstract":[{"type":"text","text":"A dependency management library inspired by SwiftUI‚Äôs ‚Äúenvironment.‚Äù"}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies","kind":"symbol","type":"topic","url":"\/documentation\/dependencies"},"https://github.com/apple/swift/blob/60952b868d46fc9a83619f747a7f92b5534fb632/stdlib/public/Concurrency/Task.swift#L500-L509":{"title":"this","titleInlineContent":[{"type":"text","text":"this"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/blob\/60952b868d46fc9a83619f747a7f92b5534fb632\/stdlib\/public\/Concurrency\/Task.swift#L500-L509","url":"https:\/\/github.com\/apple\/swift\/blob\/60952b868d46fc9a83619f747a7f92b5534fb632\/stdlib\/public\/Concurrency\/Task.swift#L500-L509"},"doc://Dependencies/documentation/Dependencies/LivePreviewTest":{"role":"article","title":"Live, preview, and test dependencies","abstract":[{"type":"text","text":"Learn how to provide different implementations of your dependencies for use in the live application,"},{"type":"text","text":" "},{"type":"text","text":"as well as in Xcode previews, and even in tests."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/LivePreviewTest","kind":"article","type":"topic","url":"\/documentation\/dependencies\/livepreviewtest"},"doc://Dependencies/documentation/Dependencies/SingleEntryPointSystems":{"role":"article","title":"Single entry point systems","abstract":[{"type":"text","text":"Learn about ‚Äúsingle entry point‚Äù systems, and why they are best suited for this dependencies"},{"type":"text","text":" "},{"type":"text","text":"library, although it is possible to use the library with non-single entry point systems."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/SingleEntryPointSystems","kind":"article","type":"topic","url":"\/documentation\/dependencies\/singleentrypointsystems"},"doc://Dependencies/documentation/Dependencies/withDependencies(from:operation:file:line:)-8e74m":{"role":"symbol","title":"withDependencies(from:operation:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withDependencies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Model"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Model"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Updates the current dependencies for the duration of a synchronous operation by taking the"},{"type":"text","text":" "},{"type":"text","text":"dependencies tied to a given object."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(from:operation:file:line:)-8e74m","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/withdependencies(from:operation:file:line:)-8e74m"},"doc://Dependencies/documentation/Dependencies/OverridingDependencies":{"role":"article","title":"Overriding dependencies","abstract":[{"type":"text","text":"Learn how dependencies can be changed at runtime so that certain parts of your application can use"},{"type":"text","text":" "},{"type":"text","text":"different dependencies."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/OverridingDependencies","kind":"article","type":"topic","url":"\/documentation\/dependencies\/overridingdependencies"},"https://developer.apple.com/documentation/swift/tasklocal/withvalue(_:operation:file:line:)-1xjor":{"title":"withValue","titleInlineContent":[{"type":"codeVoice","code":"withValue"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/tasklocal\/withvalue(_:operation:file:line:)-1xjor","url":"https:\/\/developer.apple.com\/documentation\/swift\/tasklocal\/withvalue(_:operation:file:line:)-1xjor"},"doc://Dependencies/documentation/Dependencies/TestDependencyKey/previewValue-8u2sy":{"defaultImplementations":2,"role":"symbol","title":"previewValue","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"previewValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The preview value for the dependency key."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/TestDependencyKey\/previewValue-8u2sy","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/dependencies\/testdependencykey\/previewvalue-8u2sy"},"doc://Dependencies/documentation/Dependencies/Dependency":{"role":"symbol","title":"Dependency","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dependency"}],"abstract":[{"type":"text","text":"A property wrapper for accessing dependencies."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/Dependency","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Dependency"}],"url":"\/documentation\/dependencies\/dependency"},"doc://Dependencies/documentation/Dependencies/withDependencies(_:operation:)-4uz6m":{"role":"symbol","title":"withDependencies(_:operation:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withDependencies"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Updates the current dependencies for the duration of a synchronous operation."}],"identifier":"doc:\/\/Dependencies\/documentation\/Dependencies\/withDependencies(_:operation:)-4uz6m","kind":"symbol","type":"topic","url":"\/documentation\/dependencies\/withdependencies(_:operation:)-4uz6m"},"https://developer.apple.com/documentation/swift/task/init(priority:operation:)-5k89c":{"title":"Task.init","titleInlineContent":[{"type":"codeVoice","code":"Task.init"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/init(priority:operation:)-5k89c","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/init(priority:operation:)-5k89c"},"https://developer.apple.com/documentation/swift/taskgroup/addtask(priority:operation:)":{"title":"TaskGroup.addTask","titleInlineContent":[{"type":"codeVoice","code":"TaskGroup.addTask"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtask(priority:operation:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtask(priority:operation:)"}}}